import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { FileText, Plus, Eye, Edit, Trash2, Download, FileSignature, CheckCircle, Clock, AlertCircle, FolderOpen } from 'lucide-react';

const ExpedienteManager = () => {
  // Estados principales
  const [expedientes, setExpedientes] = useState([]);
  const [selectedExpediente, setSelectedExpediente] = useState(null);
  const [loading, setLoading] = useState(false);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showDocumentModal, setShowDocumentModal] = useState(false);
  
  // Estados para filtros y paginaci칩n
  const [filter, setFilter] = useState({ estado: '', prioridad: '' });
  const [pagination, setPagination] = useState({ page: 1, limit: 10, total: 0 });

  // Estados para crear expediente
  const [newExpediente, setNewExpediente] = useState({
    titulo: '',
    descripcion: '',
    reparticion: '',
    prioridad: 'normal',
    metadatos: {}
  });

  // Estados para agregar documento
  const [newDocument, setNewDocument] = useState({
    documento_nombre: '',
    documento_tipo: 'documento',
    numero_foja: '',
    archivo: null
  });
  const [documentFile, setDocumentFile] = useState(null);

  useEffect(() => {
    loadExpedientes();
  }, [filter, pagination.page]);



  const loadExpedientes = async () => {
    setLoading(true);
    console.log('=== CARGANDO EXPEDIENTES ===');
    console.log('Token:', localStorage.getItem('token'));
    console.log('Filtros:', filter);
    console.log('Paginaci칩n:', pagination);
    
    try {
      const params = {
        page: pagination.page,
        limit: pagination.limit,
        ...filter
      };
      
      console.log('Par치metros a enviar:', params);

      const response = await axios.get('/api/expedientes', {
        params,
        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
      });

      console.log('Respuesta del servidor:', response.data);
      console.log('Expedientes recibidos:', response.data.expedientes);

      setExpedientes(response.data.expedientes || []);
      setPagination(prev => ({ 
        ...prev, 
        total: response.data.pagination?.total || 0, 
        pages: response.data.pagination?.pages || 1 
      }));
    } catch (error) {
      console.error('Error cargando expedientes:', error);
      console.error('Error response:', error.response?.data);
      alert('Error al cargar expedientes: ' + (error.response?.data?.error || error.message));
    } finally {
      setLoading(false);
    }
  };

  const createExpediente = async (e) => {
    e.preventDefault();
    
    try {
      const response = await axios.post('/api/expedientes', newExpediente, {
        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
      });

      setExpedientes([response.data.expediente, ...expedientes]);
      setShowCreateModal(false);
      setNewExpediente({ titulo: '', descripcion: '', reparticion: '', prioridad: 'normal', metadatos: {} });
      alert('Expediente creado exitosamente');
      loadExpedientes(); // Recargar lista
    } catch (error) {
      console.error('Error creando expediente:', error);
      alert('Error al crear expediente: ' + (error.response?.data?.error || error.message));
    }
  };

  const loadExpedienteDetails = async (expedienteId) => {
    try {
      const response = await axios.get(`/api/expedientes/${expedienteId}`, {
        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
      });

      setSelectedExpediente(response.data.expediente);
    } catch (error) {
      console.error('Error cargando detalles:', error);
      alert('Error al cargar detalles del expediente');
    }
  };

  const addDocument = async (e) => {
    e.preventDefault();
    if (!selectedExpediente) return;

    try {
      const formData = new FormData();
      formData.append('documento_nombre', newDocument.documento_nombre);
      formData.append('documento_tipo', newDocument.documento_tipo);
      formData.append('numero_foja', newDocument.numero_foja);
      if (newDocument.archivo) {
        formData.append('archivo', newDocument.archivo);
      }

      const response = await axios.post(`/api/expedientes/${selectedExpediente.id}/documentos`, formData, {
        headers: { 
          Authorization: `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'multipart/form-data'
        }
      });

      setShowDocumentModal(false);
      setNewDocument({ 
        documento_nombre: '', 
        documento_tipo: 'documento', 
        numero_foja: '', 
        archivo: null 
      });
      loadExpedienteDetails(selectedExpediente.id); // Recargar detalles
      alert('Documento agregado exitosamente');
    } catch (error) {
      console.error('Error agregando documento:', error);
      alert('Error al agregar documento: ' + (error.response?.data?.error || error.message));
    }
  };

  const getEstadoBadge = (estado) => {
    const badges = {
      borrador: { color: 'bg-gray-500', icon: Edit, text: 'Borrador' },
      en_proceso: { color: 'bg-blue-500', icon: Clock, text: 'En Proceso' },
      consolidado: { color: 'bg-green-500', icon: CheckCircle, text: 'Consolidado' },
      cerrado: { color: 'bg-red-500', icon: AlertCircle, text: 'Cerrado' }
    };
    
    const badge = badges[estado] || badges.borrador;
    const Icon = badge.icon;
    
    return (
      <span className={`inline-flex items-center px-2 py-1 text-xs font-medium text-white rounded-full ${badge.color}`}>
        <Icon className="w-3 h-3 mr-1" />
        {badge.text}
      </span>
    );
  };

  const getPrioridadColor = (prioridad) => {
    const colors = {
      alta: 'text-red-600 font-semibold',
      media: 'text-yellow-600 font-medium',
      normal: 'text-green-600',
      baja: 'text-gray-600'
    };
    return colors[prioridad] || colors.normal;
  };

  return (
    <div className="p-6 max-w-7xl mx-auto" style={{ position: 'relative' }}>
      {/* Header */}
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold text-gray-900 flex items-center">
          <FileText className="w-8 h-8 mr-3 text-blue-600" />
          Gesti칩n de Expedientes
        </h1>
        
        <button
          onClick={() => setShowCreateModal(true)}
          className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center"
        >
          <Plus className="w-5 h-5 mr-2" />
          Nuevo Expediente
        </button>
      </div>

      {/* Filtros */}
      <div className="bg-white p-4 rounded-lg shadow mb-6">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Estado</label>
            <select
              value={filter.estado}
              onChange={(e) => setFilter({ ...filter, estado: e.target.value })}
              className="w-full p-2 border border-gray-300 rounded-md"
            >
              <option value="">Todos los estados</option>
              <option value="borrador">Borrador</option>
              <option value="en_proceso">En Proceso</option>
              <option value="consolidado">Consolidado</option>
              <option value="cerrado">Cerrado</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Prioridad</label>
            <select
              value={filter.prioridad}
              onChange={(e) => setFilter({ ...filter, prioridad: e.target.value })}
              className="w-full p-2 border border-gray-300 rounded-md"
            >
              <option value="">Todas las prioridades</option>
              <option value="alta">Alta</option>
              <option value="media">Media</option>
              <option value="normal">Normal</option>
              <option value="baja">Baja</option>
            </select>
          </div>
          <div className="flex items-end">
            <button
              onClick={() => {
                setFilter({ estado: '', prioridad: '' });
                setPagination({ ...pagination, page: 1 });
              }}
              className="w-full px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600"
            >
              Limpiar Filtros
            </button>
          </div>
        </div>
      </div>

      {/* Contenido Principal */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Lista de Expedientes */}
        <div className="bg-white rounded-lg shadow">
          <div className="p-4 border-b">
            <h2 className="text-xl font-semibold">Lista de Expedientes</h2>
          </div>
          
          {loading ? (
            <div className="p-8 text-center">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
              <p className="mt-2 text-gray-600">Cargando expedientes...</p>
            </div>
          ) : expedientes.length === 0 ? (
            <div className="p-8 text-center text-gray-500">
              <FileText className="w-16 h-16 mx-auto mb-4 text-gray-300" />
              <p>No hay expedientes disponibles</p>
              <p className="text-sm">Crea un nuevo expediente para comenzar</p>
            </div>
          ) : (
            <div className="divide-y">
              {expedientes.map((expediente) => (
                <div
                  key={expediente.id}
                  className={`p-4 hover:bg-gray-50 cursor-pointer ${
                    selectedExpediente?.id === expediente.id ? 'bg-blue-50 border-l-4 border-blue-500' : ''
                  }`}
                  onClick={() => loadExpedienteDetails(expediente.id)}
                >
                  <div className="flex justify-between items-start">
                    <div className="flex-1">
                      <div className="flex items-center mb-2">
                        <h3 className="font-semibold text-gray-900">#{expediente.numero_expediente}</h3>
                        <span className="ml-2">{getEstadoBadge(expediente.estado)}</span>
                      </div>
                      <p className="text-gray-600 text-sm mb-2">{expediente.descripcion}</p>
                      <div className="flex items-center justify-between text-xs text-gray-500">
                        <span className={getPrioridadColor(expediente.prioridad)}>
                          Prioridad: {expediente.prioridad}
                        </span>
                        <span>{new Date(expediente.created_at).toLocaleDateString()}</span>
                      </div>
                    </div>
                    <div className="flex space-x-1 ml-4">
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          loadExpedienteDetails(expediente.id);
                        }}
                        className="p-1 text-blue-600 hover:bg-blue-100 rounded"
                      >
                        <Eye className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}

          {/* Paginaci칩n */}
          {pagination.pages > 1 && (
            <div className="p-4 border-t flex justify-between items-center">
              <button
                onClick={() => setPagination({ ...pagination, page: pagination.page - 1 })}
                disabled={pagination.page === 1}
                className="px-3 py-1 bg-gray-300 text-gray-700 rounded disabled:opacity-50"
              >
                Anterior
              </button>
              <span className="text-sm text-gray-600">
                P치gina {pagination.page} de {pagination.pages}
              </span>
              <button
                onClick={() => setPagination({ ...pagination, page: pagination.page + 1 })}
                disabled={pagination.page === pagination.pages}
                className="px-3 py-1 bg-gray-300 text-gray-700 rounded disabled:opacity-50"
              >
                Siguiente
              </button>
            </div>
          )}
        </div>

        {/* Panel de Detalles */}
        <div className="bg-white rounded-lg shadow">
          <div className="p-4 border-b">
            <h2 className="text-xl font-semibold">Detalles del Expediente</h2>
          </div>
          
          {selectedExpediente ? (
            <div className="p-4">
              <div className="mb-4">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="text-lg font-semibold">#{selectedExpediente.numero_expediente}</h3>
                  {getEstadoBadge(selectedExpediente.estado)}
                </div>
                <p className="text-gray-600 mb-2">{selectedExpediente.descripcion}</p>
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <span className="font-medium">Prioridad:</span>
                    <span className={`ml-1 ${getPrioridadColor(selectedExpediente.prioridad)}`}>
                      {selectedExpediente.prioridad}
                    </span>
                  </div>
                  <div>
                    <span className="font-medium">Creado:</span>
                    <span className="ml-1">{new Date(selectedExpediente.created_at).toLocaleDateString()}</span>
                  </div>
                </div>
              </div>

              {/* Documentos */}
              <div className="border-t pt-4">
                <div className="flex justify-between items-center mb-3">
                  <h4 className="font-semibold">Documentos</h4>
                  <button
                    onClick={() => setShowDocumentModal(true)}
                    className="text-sm bg-green-600 text-white px-3 py-1 rounded hover:bg-green-700"
                  >
                    <Plus className="w-3 h-3 inline mr-1" />
                    Agregar
                  </button>
                </div>
                
                {selectedExpediente.documentos && selectedExpediente.documentos.length > 0 ? (
                  <div className="space-y-2">
                    {selectedExpediente.documentos.map((doc) => (
                      <div key={doc.id} className="border rounded p-2">
                        <div className="flex justify-between items-center">
                          <div>
                            <p className="font-medium text-sm">{doc.documento_nombre}</p>
                            <p className="text-xs text-gray-500">Foja: {doc.numero_foja}</p>
                          </div>
                          <div className="flex space-x-1">
                            <span className={`text-xs px-2 py-1 rounded ${
                              doc.estado_firma === 'firmado' ? 'bg-green-100 text-green-800' :
                              doc.estado_firma === 'pendiente' ? 'bg-yellow-100 text-yellow-800' :
                              'bg-red-100 text-red-800'
                            }`}>
                              {doc.estado_firma}
                            </span>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <p className="text-gray-500 text-sm">No hay documentos agregados</p>
                )}
              </div>
            </div>
          ) : (
            <div className="p-8 text-center text-gray-500">
              <FolderOpen className="w-16 h-16 mx-auto mb-4 text-gray-300" />
              <p>Seleccione un expediente para ver sus detalles</p>
            </div>
          )}
        </div>
      </div>

      {/* Modal para crear expediente */}
      {showCreateModal && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: 'rgba(0, 0, 0, 0.8)',
            zIndex: 9999,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center'
          }}
        >
          <div 
            className="bg-white p-6 rounded-lg w-full max-w-md"
            style={{
              backgroundColor: 'white',
              padding: '20px',
              borderRadius: '10px',
              maxWidth: '500px',
              width: '90%',
              position: 'relative'
            }}
          >
            <h2 className="text-xl font-bold mb-4">Crear Nuevo Expediente</h2>
            
            {/* Bot칩n de cerrar */}
            <button
              onClick={() => setShowCreateModal(false)}
              style={{
                position: 'absolute',
                top: '10px',
                right: '10px',
                backgroundColor: 'red',
                color: 'white',
                border: 'none',
                borderRadius: '50%',
                width: '30px',
                height: '30px',
                fontSize: '18px',
                cursor: 'pointer'
              }}
            >
              칑
            </button>
            
            <form onSubmit={createExpediente}>
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  T칤tulo
                </label>
                <input
                  type="text"
                  value={newExpediente.titulo}
                  onChange={(e) => setNewExpediente({ ...newExpediente, titulo: e.target.value })}
                  className="w-full p-2 border border-gray-300 rounded-md"
                  placeholder="Ingrese el t칤tulo del expediente"
                  required
                />
              </div>

              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Repartici칩n
                </label>
                <input
                  type="text"
                  value={newExpediente.reparticion}
                  onChange={(e) => setNewExpediente({ ...newExpediente, reparticion: e.target.value })}
                  className="w-full p-2 border border-gray-300 rounded-md"
                  placeholder="Ingrese la repartici칩n"
                  required
                />
              </div>
              
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Descripci칩n
                </label>
                <textarea
                  value={newExpediente.descripcion}
                  onChange={(e) => setNewExpediente({ ...newExpediente, descripcion: e.target.value })}
                  className="w-full p-2 border border-gray-300 rounded-md"
                  rows={3}
                  placeholder="Ingrese una descripci칩n detallada"
                  required
                />
              </div>
              
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Prioridad
                </label>
                <select
                  value={newExpediente.prioridad}
                  onChange={(e) => setNewExpediente({ ...newExpediente, prioridad: e.target.value })}
                  className="w-full p-2 border border-gray-300 rounded-md"
                >
                  <option value="normal">Normal</option>
                  <option value="baja">Baja</option>
                  <option value="media">Media</option>
                  <option value="alta">Alta</option>
                </select>
              </div>

              <div className="flex justify-end space-x-3">
                <button
                  type="button"
                  onClick={() => setShowCreateModal(false)}
                  className="px-4 py-2 text-gray-600 bg-gray-200 rounded-md hover:bg-gray-300"
                >
                  Cancelar
                </button>
                <button
                  type="submit"
                  disabled={!newExpediente.titulo.trim() || !newExpediente.reparticion.trim() || !newExpediente.descripcion.trim()}
                  className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
                >
                  Crear Expediente
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Modal para agregar documento */}
      {showDocumentModal && selectedExpediente && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg w-full max-w-md">
            <h2 className="text-xl font-bold mb-4">Agregar Documento</h2>
            <form onSubmit={addDocument}>
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Nombre del Documento
                </label>
                <input
                  type="text"
                  value={newDocument.documento_nombre}
                  onChange={(e) => setNewDocument({ ...newDocument, documento_nombre: e.target.value })}
                  className="w-full p-2 border border-gray-300 rounded-md"
                  required
                />
              </div>

              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Tipo de Documento
                </label>
                <select
                  value={newDocument.documento_tipo}
                  onChange={(e) => setNewDocument({ ...newDocument, documento_tipo: e.target.value })}
                  className="w-full p-2 border border-gray-300 rounded-md"
                  required
                >
                  <option value="documento">Documento</option>
                  <option value="evidencia">Evidencia</option>
                  <option value="dictamen">Dictamen</option>
                  <option value="anexo">Anexo</option>
                </select>
              </div>

              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Archivo
                </label>
                <input
                  type="file"
                  onChange={(e) => setNewDocument({ ...newDocument, archivo: e.target.files[0] })}
                  className="w-full p-2 border border-gray-300 rounded-md"
                  accept=".pdf,.doc,.docx,.png,.jpg,.jpeg"
                  required
                />
                <p className="text-xs text-gray-500 mt-1">
                  Formatos permitidos: PDF, DOC, DOCX, PNG, JPG, JPEG
                </p>
              </div>
              
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  N칰mero de Foja
                </label>
                <input
                  type="number"
                  value={newDocument.numero_foja}
                  onChange={(e) => setNewDocument({ ...newDocument, numero_foja: e.target.value })}
                  className="w-full p-2 border border-gray-300 rounded-md"
                  min="1"
                  required
                />
              </div>

              <div className="flex justify-end space-x-3">
                <button
                  type="button"
                  onClick={() => {
                    setShowDocumentModal(false);
                    setDocumentFile(null);
                    setNewDocument({ 
                      documento_nombre: '', 
                      documento_tipo: 'documento', 
                      numero_foja: '', 
                      archivo: null 
                    });
                  }}
                  className="px-4 py-2 text-gray-600 bg-gray-200 rounded-md hover:bg-gray-300"
                >
                  Cancelar
                </button>
                <button
                  type="submit"
                  disabled={!newDocument.archivo || !newDocument.numero_foja || !newDocument.documento_nombre}
                  className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50"
                >
                  Agregar Documento
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg w-full max-w-md">
            <h2 className="text-xl font-bold mb-4">Agregar Documento</h2>
            <form onSubmit={addDocument}>
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Nombre del Documento
                </label>
                <input
                  type="text"
                  value={newDocument.documento_nombre}
                  onChange={(e) => setNewDocument({ ...newDocument, documento_nombre: e.target.value })}
                  className="w-full p-2 border border-gray-300 rounded-md"
                  required
                />
              </div>

              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Tipo de Documento
                </label>
                <select
                  value={newDocument.documento_tipo}
                  onChange={(e) => setNewDocument({ ...newDocument, documento_tipo: e.target.value })}
                  className="w-full p-2 border border-gray-300 rounded-md"
                  required
                >
                  <option value="documento">Documento</option>
                  <option value="evidencia">Evidencia</option>
                  <option value="dictamen">Dictamen</option>
                  <option value="anexo">Anexo</option>
                </select>
              </div>

              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Archivo
                </label>
                <input
                  type="file"
                  onChange={(e) => setNewDocument({ ...newDocument, archivo: e.target.files[0] })}
                  className="w-full p-2 border border-gray-300 rounded-md"
                  accept=".pdf,.doc,.docx,.png,.jpg,.jpeg"
                  required
                />
                <p className="text-xs text-gray-500 mt-1">
                  Formatos permitidos: PDF, DOC, DOCX, PNG, JPG, JPEG
                </p>
              </div>
              
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  N칰mero de Foja
                </label>
                <input
                  type="number"
                  value={newDocument.numero_foja}
                  onChange={(e) => setNewDocument({ ...newDocument, numero_foja: e.target.value })}
                  className="w-full p-2 border border-gray-300 rounded-md"
                  min="1"
                  required
                />
              </div>

              <div className="flex justify-end space-x-3">
                <button
                  type="button"
                  onClick={() => {
                    setShowDocumentModal(false);
                    setDocumentFile(null);
                    setNewDocument({ 
                      documento_nombre: '', 
                      documento_tipo: 'documento', 
                      numero_foja: '', 
                      archivo: null 
                    });
                  }}
                  className="px-4 py-2 text-gray-600 bg-gray-200 rounded-md hover:bg-gray-300"
                >
                  Cancelar
                </button>
                <button
                  type="submit"
                  disabled={!newDocument.archivo || !newDocument.numero_foja || !newDocument.documento_nombre}
                  className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50"
                >
                  Agregar Documento
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default ExpedienteManager;
